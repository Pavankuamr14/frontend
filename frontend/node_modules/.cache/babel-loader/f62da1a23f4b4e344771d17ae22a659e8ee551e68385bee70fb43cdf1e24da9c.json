{"ast":null,"code":"\n// // import React, { useState } from \"react\";\n// // import \"./audio.css\";\n// // import Nav from \"./nav\";\n// // import UserFooter from \"./userfooter\";\n\n// // const Audio = () => {\n// //   const [recording, setRecording] = useState(false);\n// //   const [audioBlob, setAudioBlob] = useState(null);\n// //   const [mediaRecorder, setMediaRecorder] = useState(null);\n// //   const [selectedFile, setSelectedFile] = useState(null);\n// //   const [popupMessage, setPopupMessage] = useState(\"\");\n\n// //   const startRecording = async () => {\n// //     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n// //     const recorder = new MediaRecorder(stream);\n// //     const chunks = [];\n\n// //     recorder.ondataavailable = (e) => chunks.push(e.data);\n// //     recorder.onstop = () => {\n// //       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\n// //     };\n\n// //     recorder.start();\n// //     setMediaRecorder(recorder);\n// //     setRecording(true);\n// //   };\n\n// //   const stopRecording = () => {\n// //     mediaRecorder.stop();\n// //     setRecording(false);\n// //   };\n\n// //   const handleFileChange = (e) => {\n// //     setSelectedFile(e.target.files[0]);\n// //     setAudioBlob(null); // Clear recorded audio if a file is selected\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!audioBlob && !selectedFile) {\n// //       alert(\"Please record or upload an audio file.\");\n// //       return;\n// //     }\n\n// //     const formData = new FormData();\n// //     if (audioBlob) {\n// //       formData.append(\"audio\", audioBlob, \"recording.wav\");\n// //     } else if (selectedFile) {\n// //       formData.append(\"audio\", selectedFile);\n// //     }\n\n// //     try {\n// //       const res = await fetch(\"http://127.0.0.1:5000/process-audio\", {\n// //         method: \"POST\",\n// //         body: formData,\n// //       });\n\n// //       const data = await res.json();\n// //       if (data.error) {\n// //         alert(\"Error processing audio: \" + data.error);\n// //       } else {\n// //         setPopupMessage(data.result);\n// //         alert(data.result); // Popup message\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error uploading audio:\", error);\n// //       alert(\"Failed to process audio.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <>\n// //       <Nav />\n// //       <div className=\"audiocontainer\">\n// //         <div className=\"audiocard\">\n// //           <h2>Submit Your Audio</h2>\n// //           <form onSubmit={handleSubmit}>\n// //             <label>\n// //               Name:\n// //               <input type=\"text\" name=\"name\" required />\n// //             </label>\n// //             <label>\n// //               Type of Data:\n// //               <select name=\"dataType\" required>\n// //                 <option value=\"\">Select</option>\n// //                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n// //                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\n// //                 <option value=\"Folk Songs\">Folk Songs</option>\n// //                 <option value=\"Language and Dialects\">Language and Dialects</option>\n// //                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n// //               </select>\n// //             </label>\n// //             <label>\n// //               Upload Audio:\n// //               <input\n// //                 type=\"file\"\n// //                 accept=\"audio/*\"\n// //                 onChange={handleFileChange}\n// //               />\n// //             </label>\n// //             <div className=\"audiorecord-section\">\n// //               <button\n// //                 type=\"button\"\n// //                 onClick={recording ? stopRecording : startRecording}\n// //                 className=\"audiorecord-btn\"\n// //               >\n// //                 {recording ? \"Stop Recording\" : \"Record Audio\"}\n// //               </button>\n// //             </div>\n// //             {audioBlob && <p>Recording saved! You can submit now.</p>}\n// //             {selectedFile && <p>File selected: {selectedFile.name}</p>}\n// //             <button type=\"submit\" className=\"audiosubmit-btn\">\n// //               Submit\n// //             </button>\n// //           </form>\n// //         </div>\n// //         <div className=\"audiocard rules\">\n// //           <h2>Rules and Conditions</h2>\n// //           <ul>\n// //             <li>No background noise in the audio recording.</li>\n// //             <li>Start the audio with your name and the place you are from.</li>\n// //             <li>Specify the place format: <b>village name, mandal name</b>.</li>\n// //             <li>Then begin the original content.</li>\n// //           </ul>\n// //         </div>\n// //         {popupMessage && <div className=\"popup\">{popupMessage}</div>}\n// //       </div>\n// //       <UserFooter />\n// //     </>\n// //   );\n// // };\n\n// // export default Audio;\n// import React, { useState } from \"react\";\n// import \"./audio.css\";\n// import Nav from \"./nav\";\n// import UserFooter from \"./userfooter\";\n\n// const Audio = () => {\n//   // State management\n//   const [recording, setRecording] = useState(false);\n//   const [audioBlob, setAudioBlob] = useState(null);\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [popupMessage, setPopupMessage] = useState(\"\");\n//   const [isProcessing, setIsProcessing] = useState(false);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     dataType: \"\"\n//   });\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n//   };\n\n//   // Handle file upload\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setSelectedFile(file);\n//       setAudioBlob(null); // Clear recorded audio if a file is selected\n//     }\n//   };\n\n//   // Start recording\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       const recorder = new MediaRecorder(stream);\n//       const chunks = [];\n\n//       recorder.ondataavailable = (e) => chunks.push(e.data);\n//       recorder.onstop = () => {\n//         const blob = new Blob(chunks, { type: \"audio/wav\" });\n//         setAudioBlob(blob);\n//         stream.getTracks().forEach(track => track.stop());\n//       };\n\n//       recorder.start();\n//       setMediaRecorder(recorder);\n//       setRecording(true);\n//     } catch (error) {\n//       console.error(\"Error accessing microphone:\", error);\n//       setPopupMessage(\"Error accessing microphone. Please check permissions.\");\n//     }\n//   };\n\n//   // Stop recording\n//   const stopRecording = () => {\n//     if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\n//       mediaRecorder.stop();\n//       setRecording(false);\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!audioBlob && !selectedFile) {\n//       setPopupMessage(\"Please record or upload an audio file.\");\n//       return;\n//     }\n\n//     if (!formData.name || !formData.dataType) {\n//       setPopupMessage(\"Please fill in all required fields.\");\n//       return;\n//     }\n\n//     setIsProcessing(true);\n//     setPopupMessage(\"Processing audio... Please wait.\");\n\n//     const formPayload = new FormData();\n//     formPayload.append(\"name\", formData.name);\n//     formPayload.append(\"dataType\", formData.dataType);\n\n//     if (audioBlob) {\n//       formPayload.append(\"audio\", audioBlob, \"recording.wav\");\n//     } else if (selectedFile) {\n//       formPayload.append(\"audio\", selectedFile);\n//     }\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:5000/process-audio\", {\n//         method: \"POST\",\n//         body: formPayload,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       setPopupMessage(data.error || data.result);\n//       // setPopupMessage(data.error || data.transcribed_text);\n//     } catch (error) {\n//       console.error(\"Error during fetch:\", error);\n//       setPopupMessage(\"Failed to process audio. Please try again later.\");\n//     } finally {\n//       setIsProcessing(false);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Nav />\n//       <div className=\"audiocontainer\">\n//         <div className=\"audiocard\">\n//           <h2>Submit Your Audio</h2>\n//           <form onSubmit={handleSubmit}>\n//             <label>\n//               Name:\n//               <input \n//                 type=\"text\" \n//                 name=\"name\" \n//                 value={formData.name}\n//                 onChange={handleInputChange}\n//                 required \n//               />\n//             </label>\n//             <label>\n//               Type of Data:\n//               <select \n//                 name=\"dataType\" \n//                 value={formData.dataType}\n//                 onChange={handleInputChange}\n//                 required\n//               >\n//                 <option value=\"\">Select</option>\n//                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n//                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\n//                 <option value=\"Folk Songs\">Folk Songs</option>\n//                 <option value=\"Language and Dialects\">Language and Dialects</option>\n//                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n//               </select>\n//             </label>\n//             <label>\n//               Upload Audio:\n//               <input\n//                 type=\"file\"\n//                 accept=\"audio/*\"\n//                 onChange={handleFileChange}\n//                 disabled={recording || isProcessing}\n//               />\n//             </label>\n//             <div className=\"audiorecord-section\">\n//               <button\n//                 type=\"button\"\n//                 onClick={recording ? stopRecording : startRecording}\n//                 className=\"audiorecord-btn\"\n//                 disabled={selectedFile || isProcessing}\n//               >\n//                 {recording ? \"Stop Recording\" : \"Record Audio\"}\n//               </button>\n//             </div>\n//             {audioBlob && <p>Recording saved! You can submit now.</p>}\n//             {selectedFile && <p>File selected: {selectedFile.name}</p>}\n//             <button \n//               type=\"submit\" \n//               className=\"audiosubmit-btn\"\n//               disabled={isProcessing || (!audioBlob && !selectedFile)}\n//             >\n//               {isProcessing ? \"Processing...\" : \"Submit\"}\n//             </button>\n//           </form>\n//         </div>\n//         <div className=\"audiocard rules\">\n//           <h2>Rules and Conditions</h2>\n//           <ul>\n//             <li>No background noise in the audio recording.</li>\n//             <li>Start the audio with your name and the place you are from.</li>\n//             <li>Specify the place format: <b>village name, mandal name</b>.</li>\n//             <li>Then begin the original content.</li>\n//           </ul>\n//         </div>\n//         {popupMessage && (\n//           <div className=\"popup\">\n//             {popupMessage}\n//             <button \n//               onClick={() => setPopupMessage(\"\")} \n//               className=\"close-popup\"\n//             >\n//               ×\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//       <UserFooter />\n//     </>\n//   );\n// };\n\n// export default Audio;","map":{"version":3,"names":[],"sources":["C:/Users/PAVAN SAI KUMAR/OneDrive/Desktop/frontend/frontend/src/components/user/audio.js"],"sourcesContent":["\r\n// // import React, { useState } from \"react\";\r\n// // import \"./audio.css\";\r\n// // import Nav from \"./nav\";\r\n// // import UserFooter from \"./userfooter\";\r\n\r\n// // const Audio = () => {\r\n// //   const [recording, setRecording] = useState(false);\r\n// //   const [audioBlob, setAudioBlob] = useState(null);\r\n// //   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n// //   const [selectedFile, setSelectedFile] = useState(null);\r\n// //   const [popupMessage, setPopupMessage] = useState(\"\");\r\n\r\n// //   const startRecording = async () => {\r\n// //     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n// //     const recorder = new MediaRecorder(stream);\r\n// //     const chunks = [];\r\n\r\n// //     recorder.ondataavailable = (e) => chunks.push(e.data);\r\n// //     recorder.onstop = () => {\r\n// //       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n// //     };\r\n\r\n// //     recorder.start();\r\n// //     setMediaRecorder(recorder);\r\n// //     setRecording(true);\r\n// //   };\r\n\r\n// //   const stopRecording = () => {\r\n// //     mediaRecorder.stop();\r\n// //     setRecording(false);\r\n// //   };\r\n\r\n// //   const handleFileChange = (e) => {\r\n// //     setSelectedFile(e.target.files[0]);\r\n// //     setAudioBlob(null); // Clear recorded audio if a file is selected\r\n// //   };\r\n\r\n// //   const handleSubmit = async (e) => {\r\n// //     e.preventDefault();\r\n\r\n// //     if (!audioBlob && !selectedFile) {\r\n// //       alert(\"Please record or upload an audio file.\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const formData = new FormData();\r\n// //     if (audioBlob) {\r\n// //       formData.append(\"audio\", audioBlob, \"recording.wav\");\r\n// //     } else if (selectedFile) {\r\n// //       formData.append(\"audio\", selectedFile);\r\n// //     }\r\n\r\n// //     try {\r\n// //       const res = await fetch(\"http://127.0.0.1:5000/process-audio\", {\r\n// //         method: \"POST\",\r\n// //         body: formData,\r\n// //       });\r\n\r\n// //       const data = await res.json();\r\n// //       if (data.error) {\r\n// //         alert(\"Error processing audio: \" + data.error);\r\n// //       } else {\r\n// //         setPopupMessage(data.result);\r\n// //         alert(data.result); // Popup message\r\n// //       }\r\n// //     } catch (error) {\r\n// //       console.error(\"Error uploading audio:\", error);\r\n// //       alert(\"Failed to process audio.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <>\r\n// //       <Nav />\r\n// //       <div className=\"audiocontainer\">\r\n// //         <div className=\"audiocard\">\r\n// //           <h2>Submit Your Audio</h2>\r\n// //           <form onSubmit={handleSubmit}>\r\n// //             <label>\r\n// //               Name:\r\n// //               <input type=\"text\" name=\"name\" required />\r\n// //             </label>\r\n// //             <label>\r\n// //               Type of Data:\r\n// //               <select name=\"dataType\" required>\r\n// //                 <option value=\"\">Select</option>\r\n// //                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n// //                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n// //                 <option value=\"Folk Songs\">Folk Songs</option>\r\n// //                 <option value=\"Language and Dialects\">Language and Dialects</option>\r\n// //                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n// //               </select>\r\n// //             </label>\r\n// //             <label>\r\n// //               Upload Audio:\r\n// //               <input\r\n// //                 type=\"file\"\r\n// //                 accept=\"audio/*\"\r\n// //                 onChange={handleFileChange}\r\n// //               />\r\n// //             </label>\r\n// //             <div className=\"audiorecord-section\">\r\n// //               <button\r\n// //                 type=\"button\"\r\n// //                 onClick={recording ? stopRecording : startRecording}\r\n// //                 className=\"audiorecord-btn\"\r\n// //               >\r\n// //                 {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n// //               </button>\r\n// //             </div>\r\n// //             {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n// //             {selectedFile && <p>File selected: {selectedFile.name}</p>}\r\n// //             <button type=\"submit\" className=\"audiosubmit-btn\">\r\n// //               Submit\r\n// //             </button>\r\n// //           </form>\r\n// //         </div>\r\n// //         <div className=\"audiocard rules\">\r\n// //           <h2>Rules and Conditions</h2>\r\n// //           <ul>\r\n// //             <li>No background noise in the audio recording.</li>\r\n// //             <li>Start the audio with your name and the place you are from.</li>\r\n// //             <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n// //             <li>Then begin the original content.</li>\r\n// //           </ul>\r\n// //         </div>\r\n// //         {popupMessage && <div className=\"popup\">{popupMessage}</div>}\r\n// //       </div>\r\n// //       <UserFooter />\r\n// //     </>\r\n// //   );\r\n// // };\r\n\r\n// // export default Audio;\r\n// import React, { useState } from \"react\";\r\n// import \"./audio.css\";\r\n// import Nav from \"./nav\";\r\n// import UserFooter from \"./userfooter\";\r\n\r\n// const Audio = () => {\r\n//   // State management\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBlob, setAudioBlob] = useState(null);\r\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n//   const [selectedFile, setSelectedFile] = useState(null);\r\n//   const [popupMessage, setPopupMessage] = useState(\"\");\r\n//   const [isProcessing, setIsProcessing] = useState(false);\r\n//   const [formData, setFormData] = useState({\r\n//     name: \"\",\r\n//     dataType: \"\"\r\n//   });\r\n\r\n//   // Handle form input changes\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData(prev => ({\r\n//       ...prev,\r\n//       [name]: value\r\n//     }));\r\n//   };\r\n\r\n//   // Handle file upload\r\n//   const handleFileChange = (e) => {\r\n//     const file = e.target.files[0];\r\n//     if (file) {\r\n//       setSelectedFile(file);\r\n//       setAudioBlob(null); // Clear recorded audio if a file is selected\r\n//     }\r\n//   };\r\n\r\n//   // Start recording\r\n//   const startRecording = async () => {\r\n//     try {\r\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//       const recorder = new MediaRecorder(stream);\r\n//       const chunks = [];\r\n\r\n//       recorder.ondataavailable = (e) => chunks.push(e.data);\r\n//       recorder.onstop = () => {\r\n//         const blob = new Blob(chunks, { type: \"audio/wav\" });\r\n//         setAudioBlob(blob);\r\n//         stream.getTracks().forEach(track => track.stop());\r\n//       };\r\n\r\n//       recorder.start();\r\n//       setMediaRecorder(recorder);\r\n//       setRecording(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error accessing microphone:\", error);\r\n//       setPopupMessage(\"Error accessing microphone. Please check permissions.\");\r\n//     }\r\n//   };\r\n\r\n//   // Stop recording\r\n//   const stopRecording = () => {\r\n//     if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\r\n//       mediaRecorder.stop();\r\n//       setRecording(false);\r\n//     }\r\n//   };\r\n\r\n//   // Handle form submission\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     if (!audioBlob && !selectedFile) {\r\n//       setPopupMessage(\"Please record or upload an audio file.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!formData.name || !formData.dataType) {\r\n//       setPopupMessage(\"Please fill in all required fields.\");\r\n//       return;\r\n//     }\r\n\r\n//     setIsProcessing(true);\r\n//     setPopupMessage(\"Processing audio... Please wait.\");\r\n\r\n//     const formPayload = new FormData();\r\n//     formPayload.append(\"name\", formData.name);\r\n//     formPayload.append(\"dataType\", formData.dataType);\r\n    \r\n//     if (audioBlob) {\r\n//       formPayload.append(\"audio\", audioBlob, \"recording.wav\");\r\n//     } else if (selectedFile) {\r\n//       formPayload.append(\"audio\", selectedFile);\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:5000/process-audio\", {\r\n//         method: \"POST\",\r\n//         body: formPayload,\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! Status: ${response.status}`);\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setPopupMessage(data.error || data.result);\r\n//       // setPopupMessage(data.error || data.transcribed_text);\r\n//     } catch (error) {\r\n//       console.error(\"Error during fetch:\", error);\r\n//       setPopupMessage(\"Failed to process audio. Please try again later.\");\r\n//     } finally {\r\n//       setIsProcessing(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Nav />\r\n//       <div className=\"audiocontainer\">\r\n//         <div className=\"audiocard\">\r\n//           <h2>Submit Your Audio</h2>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <label>\r\n//               Name:\r\n//               <input \r\n//                 type=\"text\" \r\n//                 name=\"name\" \r\n//                 value={formData.name}\r\n//                 onChange={handleInputChange}\r\n//                 required \r\n//               />\r\n//             </label>\r\n//             <label>\r\n//               Type of Data:\r\n//               <select \r\n//                 name=\"dataType\" \r\n//                 value={formData.dataType}\r\n//                 onChange={handleInputChange}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select</option>\r\n//                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n//                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n//                 <option value=\"Folk Songs\">Folk Songs</option>\r\n//                 <option value=\"Language and Dialects\">Language and Dialects</option>\r\n//                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n//               </select>\r\n//             </label>\r\n//             <label>\r\n//               Upload Audio:\r\n//               <input\r\n//                 type=\"file\"\r\n//                 accept=\"audio/*\"\r\n//                 onChange={handleFileChange}\r\n//                 disabled={recording || isProcessing}\r\n//               />\r\n//             </label>\r\n//             <div className=\"audiorecord-section\">\r\n//               <button\r\n//                 type=\"button\"\r\n//                 onClick={recording ? stopRecording : startRecording}\r\n//                 className=\"audiorecord-btn\"\r\n//                 disabled={selectedFile || isProcessing}\r\n//               >\r\n//                 {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n//               </button>\r\n//             </div>\r\n//             {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n//             {selectedFile && <p>File selected: {selectedFile.name}</p>}\r\n//             <button \r\n//               type=\"submit\" \r\n//               className=\"audiosubmit-btn\"\r\n//               disabled={isProcessing || (!audioBlob && !selectedFile)}\r\n//             >\r\n//               {isProcessing ? \"Processing...\" : \"Submit\"}\r\n//             </button>\r\n//           </form>\r\n//         </div>\r\n//         <div className=\"audiocard rules\">\r\n//           <h2>Rules and Conditions</h2>\r\n//           <ul>\r\n//             <li>No background noise in the audio recording.</li>\r\n//             <li>Start the audio with your name and the place you are from.</li>\r\n//             <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n//             <li>Then begin the original content.</li>\r\n//           </ul>\r\n//         </div>\r\n//         {popupMessage && (\r\n//           <div className=\"popup\">\r\n//             {popupMessage}\r\n//             <button \r\n//               onClick={() => setPopupMessage(\"\")} \r\n//               className=\"close-popup\"\r\n//             >\r\n//               ×\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//       <UserFooter />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Audio;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}