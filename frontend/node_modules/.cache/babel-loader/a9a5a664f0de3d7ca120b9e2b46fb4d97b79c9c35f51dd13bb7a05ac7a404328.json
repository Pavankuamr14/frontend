{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN SAI KUMAR\\\\OneDrive\\\\Desktop\\\\frontend\\\\frontend\\\\src\\\\components\\\\user\\\\audio.js\",\n  _s = $RefreshSig$();\n// // App.js\n// import React, { useState } from \"react\";\n// import \"./audio.css\";\n// import Nav from \"./nav\";\n// import UserFooter from \"./userfooter\";\n// const Audio = () => {\n//   const [recording, setRecording] = useState(false);\n//   const [audioBlob, setAudioBlob] = useState(null);\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\n\n//   const startRecording = async () => {\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//     const recorder = new MediaRecorder(stream);\n//     const chunks = [];\n\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\n//     recorder.onstop = () => {\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\n//     };\n\n//     recorder.start();\n//     setMediaRecorder(recorder);\n//     setRecording(true);\n//   };\n\n//   const stopRecording = () => {\n//     mediaRecorder.stop();\n//     setRecording(false);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     alert(\"Form submitted successfully!\");\n//     // Add form submission logic here (e.g., send data to a server)\n//   };\n\n//   return (\n//     <>\n//     <Nav/>\n//     <div className=\"audiocontainer\">\n//       <div className=\"audiocard\">\n//         <h2>Submit Your Audio</h2>\n//         <form onSubmit={handleSubmit}>\n//           <label>\n//             Name:\n//             <input type=\"text\" name=\"name\" required />\n//           </label>\n//           <label>\n//             Type of Data:\n//             <select name=\"dataType\" required>\n//               <option value=\"\">Select</option>\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\n//               <option value=\"Folk Songs\">Folk Songs</option>\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n//             </select>\n//           </label>\n//           <label>\n//             Upload Audio:\n//             <input type=\"file\" accept=\"audio/*\" />\n//           </label>\n//           <div className=\"audiorecord-section\">\n//             <button\n//               type=\"button\"\n//               onClick={recording ? stopRecording : startRecording}\n//               className=\"audiorecord-btn\"\n//             >\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\n//             </button>\n//           </div>\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\n//             Submit\n//           </button>\n//         </form>\n//       </div>\n//       <div className=\"audiocard rules\">\n//         <h2>Rules and Conditions</h2>\n//         <ul>\n//           <li>No background noise in the audio recording.</li>\n//           <li>Start the audio with your name and the place you are from.</li>\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\n//           <li>Then begin the original content.</li>\n//         </ul>\n//       </div>\n//     </div>\n//     <UserFooter/>\n//     </>\n//   );\n// }\n\n// export default Audio;\nimport React, { useState } from 'react';\nimport './audio.css'; // Import your CSS file\nimport Nav from './nav';\nimport UserFooter from './userfooter';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Audio = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [name, setName] = useState(''); // For name input\n  const [dataType, setDataType] = useState(''); // For data type selection\n  const [uploadedAudio, setUploadedAudio] = useState(null); // For uploaded audio\n\n  const startRecording = async () => {\n    // ... (Your existing recording logic)\n  };\n  const stopRecording = () => {\n    // ... (Your existing stop recording logic)\n  };\n  const handleFileChange = e => {\n    // Handle file uploads\n    setUploadedAudio(e.target.files[0]);\n    setAudioBlob(e.target.files[0]); // Use uploaded file for submission\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let audioFile = audioBlob; // Prefer recorded/uploaded audio\n\n    if (!audioFile) {\n      alert('Please record or upload an audio file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', audioFile, 'audio_input.wav'); // Key as \"file\", give a filename\n    formData.append('name', name);\n    formData.append('dataType', dataType);\n    try {\n      const response = await fetch('http://localhost:8000/api/process-audio', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json(); // Get error details if available\n        alert(`Error: ${errorData.detail || response.statusText}`);\n        return;\n      }\n      const data = await response.json();\n      if (data.success) {\n        alert(data.prediction);\n      } else {\n        alert('Error processing audio. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      alert('An error occurred. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your name\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: dataType,\n          onChange: e => setDataType(e.target.value),\n          required: true,\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select data type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          accept: \"audio/*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Audio, \"bfofI/38jx6Pz0OZmHSPHM0dTfw=\");\n_c = Audio;\nexport default Audio;\nvar _c;\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"names":["React","useState","Nav","UserFooter","jsxDEV","_jsxDEV","Fragment","_Fragment","Audio","_s","recording","setRecording","audioBlob","setAudioBlob","mediaRecorder","setMediaRecorder","name","setName","dataType","setDataType","uploadedAudio","setUploadedAudio","startRecording","stopRecording","handleFileChange","e","target","files","handleSubmit","preventDefault","audioFile","alert","formData","FormData","append","response","fetch","method","body","ok","errorData","json","detail","statusText","data","success","prediction","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","required","disabled","accept","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN SAI KUMAR/OneDrive/Desktop/frontend/frontend/src/components/user/audio.js"],"sourcesContent":["// // App.js\r\n// import React, { useState } from \"react\";\r\n// import \"./audio.css\";\r\n// import Nav from \"./nav\";\r\n// import UserFooter from \"./userfooter\";\r\n// const Audio = () => {\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBlob, setAudioBlob] = useState(null);\r\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n\r\n//   const startRecording = async () => {\r\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//     const recorder = new MediaRecorder(stream);\r\n//     const chunks = [];\r\n\r\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\r\n//     recorder.onstop = () => {\r\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n//     };\r\n\r\n//     recorder.start();\r\n//     setMediaRecorder(recorder);\r\n//     setRecording(true);\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     mediaRecorder.stop();\r\n//     setRecording(false);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     alert(\"Form submitted successfully!\");\r\n//     // Add form submission logic here (e.g., send data to a server)\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <Nav/>\r\n//     <div className=\"audiocontainer\">\r\n//       <div className=\"audiocard\">\r\n//         <h2>Submit Your Audio</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <label>\r\n//             Name:\r\n//             <input type=\"text\" name=\"name\" required />\r\n//           </label>\r\n//           <label>\r\n//             Type of Data:\r\n//             <select name=\"dataType\" required>\r\n//               <option value=\"\">Select</option>\r\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n//               <option value=\"Folk Songs\">Folk Songs</option>\r\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\r\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n//             </select>\r\n//           </label>\r\n//           <label>\r\n//             Upload Audio:\r\n//             <input type=\"file\" accept=\"audio/*\" />\r\n//           </label>\r\n//           <div className=\"audiorecord-section\">\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={recording ? stopRecording : startRecording}\r\n//               className=\"audiorecord-btn\"\r\n//             >\r\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n//             </button>\r\n//           </div>\r\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\r\n//             Submit\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//       <div className=\"audiocard rules\">\r\n//         <h2>Rules and Conditions</h2>\r\n//         <ul>\r\n//           <li>No background noise in the audio recording.</li>\r\n//           <li>Start the audio with your name and the place you are from.</li>\r\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n//           <li>Then begin the original content.</li>\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//     <UserFooter/>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Audio;\r\nimport React, { useState } from 'react';\r\nimport './audio.css'; // Import your CSS file\r\nimport Nav from './nav';\r\nimport UserFooter from './userfooter';\r\n\r\nconst Audio = () => {\r\n    const [recording, setRecording] = useState(false);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const [name, setName] = useState(''); // For name input\r\n    const [dataType, setDataType] = useState(''); // For data type selection\r\n    const [uploadedAudio, setUploadedAudio] = useState(null); // For uploaded audio\r\n\r\n    const startRecording = async () => {\r\n        // ... (Your existing recording logic)\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        // ... (Your existing stop recording logic)\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        // Handle file uploads\r\n        setUploadedAudio(e.target.files[0]);\r\n        setAudioBlob(e.target.files[0]); // Use uploaded file for submission\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let audioFile = audioBlob; // Prefer recorded/uploaded audio\r\n\r\n        if (!audioFile) {\r\n            alert('Please record or upload an audio file.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', audioFile, 'audio_input.wav'); // Key as \"file\", give a filename\r\n        formData.append('name', name);\r\n        formData.append('dataType', dataType);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8000/api/process-audio', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json(); // Get error details if available\r\n                alert(`Error: ${errorData.detail || response.statusText}`);\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (data.success) {\r\n                alert(data.prediction);\r\n            } else {\r\n                alert('Error processing audio. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error submitting form:', error);\r\n            alert('An error occurred. Please try again later.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Nav />\r\n            <div>\r\n                {/* Your JSX content here */}\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your name\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        required\r\n                    />\r\n                    <select\r\n                        value={dataType}\r\n                        onChange={(e) => setDataType(e.target.value)}\r\n                        required\r\n                    >\r\n                        <option value=\"\" disabled>Select data type</option>\r\n                        {/* Add your options here */}\r\n                    </select>\r\n                    <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n            <UserFooter />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Audio;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}