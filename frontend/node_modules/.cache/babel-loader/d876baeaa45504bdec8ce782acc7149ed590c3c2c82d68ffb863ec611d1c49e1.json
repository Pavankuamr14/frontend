{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN SAI KUMAR\\\\OneDrive\\\\Desktop\\\\frontend\\\\frontend\\\\src\\\\components\\\\user\\\\audio.js\",\n  _s = $RefreshSig$();\n// // App.js\n// import React, { useState } from \"react\";\n// import \"./audio.css\";\n// import Nav from \"./nav\";\n// import UserFooter from \"./userfooter\";\n// const Audio = () => {\n//   const [recording, setRecording] = useState(false);\n//   const [audioBlob, setAudioBlob] = useState(null);\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\n\n//   const startRecording = async () => {\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//     const recorder = new MediaRecorder(stream);\n//     const chunks = [];\n\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\n//     recorder.onstop = () => {\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\n//     };\n\n//     recorder.start();\n//     setMediaRecorder(recorder);\n//     setRecording(true);\n//   };\n\n//   const stopRecording = () => {\n//     mediaRecorder.stop();\n//     setRecording(false);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     alert(\"Form submitted successfully!\");\n//     // Add form submission logic here (e.g., send data to a server)\n//   };\n\n//   return (\n//     <>\n//     <Nav/>\n//     <div className=\"audiocontainer\">\n//       <div className=\"audiocard\">\n//         <h2>Submit Your Audio</h2>\n//         <form onSubmit={handleSubmit}>\n//           <label>\n//             Name:\n//             <input type=\"text\" name=\"name\" required />\n//           </label>\n//           <label>\n//             Type of Data:\n//             <select name=\"dataType\" required>\n//               <option value=\"\">Select</option>\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\n//               <option value=\"Folk Songs\">Folk Songs</option>\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n//             </select>\n//           </label>\n//           <label>\n//             Upload Audio:\n//             <input type=\"file\" accept=\"audio/*\" />\n//           </label>\n//           <div className=\"audiorecord-section\">\n//             <button\n//               type=\"button\"\n//               onClick={recording ? stopRecording : startRecording}\n//               className=\"audiorecord-btn\"\n//             >\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\n//             </button>\n//           </div>\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\n//             Submit\n//           </button>\n//         </form>\n//       </div>\n//       <div className=\"audiocard rules\">\n//         <h2>Rules and Conditions</h2>\n//         <ul>\n//           <li>No background noise in the audio recording.</li>\n//           <li>Start the audio with your name and the place you are from.</li>\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\n//           <li>Then begin the original content.</li>\n//         </ul>\n//       </div>\n//     </div>\n//     <UserFooter/>\n//     </>\n//   );\n// }\n\n// export default Audio;\nimport React, { useState } from \"react\";\nimport \"./audio.css\";\nimport Nav from \"./nav\";\nimport UserFooter from \"./userfooter\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Audio = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [name, setName] = useState('');\n  const [dataType, setDataType] = useState('');\n  const [uploadedAudio, setUploadedAudio] = useState(null);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const recorder = new MediaRecorder(stream);\n    const chunks = [];\n    recorder.ondataavailable = e => chunks.push(e.data);\n    recorder.onstop = () => {\n      setAudioBlob(new Blob(chunks, {\n        type: \"audio/wav\"\n      }));\n    };\n    recorder.start();\n    setMediaRecorder(recorder);\n    setRecording(true);\n  };\n  const stopRecording = () => {\n    mediaRecorder.stop();\n    setRecording(false);\n  };\n  const handleFileChange = e => {\n    setUploadedAudio(e.target.files[0]);\n    setAudioBlob(e.target.files[0]); // Use uploaded file for submission\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let audioFile = audioBlob;\n    if (!audioFile) {\n      alert('Please record or upload an audio file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', audioFile, 'audio_input.wav');\n    formData.append('name', name);\n    formData.append('dataType', dataType);\n    try {\n      const response = await fetch('http://localhost:8000/api/process-audio', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.detail || response.statusText}`);\n        return;\n      }\n      const data = await response.json();\n      if (data.success) {\n        alert(`Prediction: ${data.prediction}`);\n      } else {\n        alert('Error processing audio. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      alert('An error occurred. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audiocontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Submit Your Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: name,\n              onChange: e => setName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Type of Data:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"dataType\",\n              value: dataType,\n              onChange: e => setDataType(e.target.value),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Local Legends and Stories\",\n                children: \"Local Legends and Stories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Cultural Explanations\",\n                children: \"Cultural Explanations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Folk Songs\",\n                children: \"Folk Songs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Language and Dialects\",\n                children: \"Language and Dialects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Traditional Crop Information\",\n                children: \"Traditional Crop Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Upload Audio:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \"audio/*\",\n              onChange: handleFileChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"audiorecord-section\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: recording ? stopRecording : startRecording,\n              className: \"audiorecord-btn\",\n              children: recording ? \"Stop Recording\" : \"Record Audio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), audioBlob && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Recording saved! You can submit now.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"audiosubmit-btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard rules\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Rules and Conditions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No background noise in the audio recording.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Start the audio with your name and the place you are from.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Specify the place format: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"village name, mandal name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 55\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Then begin the original content.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Audio, \"bfofI/38jx6Pz0OZmHSPHM0dTfw=\");\n_c = Audio;\nexport default Audio;\nvar _c;\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"names":["React","useState","Nav","UserFooter","jsxDEV","_jsxDEV","Fragment","_Fragment","Audio","_s","recording","setRecording","audioBlob","setAudioBlob","mediaRecorder","setMediaRecorder","name","setName","dataType","setDataType","uploadedAudio","setUploadedAudio","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","e","push","data","onstop","Blob","type","start","stopRecording","stop","handleFileChange","target","files","handleSubmit","preventDefault","audioFile","alert","formData","FormData","append","response","fetch","method","body","ok","errorData","json","detail","statusText","success","prediction","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","value","onChange","required","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN SAI KUMAR/OneDrive/Desktop/frontend/frontend/src/components/user/audio.js"],"sourcesContent":["// // App.js\r\n// import React, { useState } from \"react\";\r\n// import \"./audio.css\";\r\n// import Nav from \"./nav\";\r\n// import UserFooter from \"./userfooter\";\r\n// const Audio = () => {\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBlob, setAudioBlob] = useState(null);\r\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n\r\n//   const startRecording = async () => {\r\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//     const recorder = new MediaRecorder(stream);\r\n//     const chunks = [];\r\n\r\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\r\n//     recorder.onstop = () => {\r\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n//     };\r\n\r\n//     recorder.start();\r\n//     setMediaRecorder(recorder);\r\n//     setRecording(true);\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     mediaRecorder.stop();\r\n//     setRecording(false);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     alert(\"Form submitted successfully!\");\r\n//     // Add form submission logic here (e.g., send data to a server)\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <Nav/>\r\n//     <div className=\"audiocontainer\">\r\n//       <div className=\"audiocard\">\r\n//         <h2>Submit Your Audio</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <label>\r\n//             Name:\r\n//             <input type=\"text\" name=\"name\" required />\r\n//           </label>\r\n//           <label>\r\n//             Type of Data:\r\n//             <select name=\"dataType\" required>\r\n//               <option value=\"\">Select</option>\r\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n//               <option value=\"Folk Songs\">Folk Songs</option>\r\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\r\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n//             </select>\r\n//           </label>\r\n//           <label>\r\n//             Upload Audio:\r\n//             <input type=\"file\" accept=\"audio/*\" />\r\n//           </label>\r\n//           <div className=\"audiorecord-section\">\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={recording ? stopRecording : startRecording}\r\n//               className=\"audiorecord-btn\"\r\n//             >\r\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n//             </button>\r\n//           </div>\r\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\r\n//             Submit\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//       <div className=\"audiocard rules\">\r\n//         <h2>Rules and Conditions</h2>\r\n//         <ul>\r\n//           <li>No background noise in the audio recording.</li>\r\n//           <li>Start the audio with your name and the place you are from.</li>\r\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n//           <li>Then begin the original content.</li>\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//     <UserFooter/>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Audio;\r\nimport React, { useState } from \"react\";\r\nimport \"./audio.css\";\r\nimport Nav from \"./nav\";\r\nimport UserFooter from \"./userfooter\";\r\n\r\nconst Audio = () => {\r\n    const [recording, setRecording] = useState(false);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const [name, setName] = useState('');\r\n    const [dataType, setDataType] = useState('');\r\n    const [uploadedAudio, setUploadedAudio] = useState(null);\r\n\r\n    const startRecording = async () => {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        const chunks = [];\r\n\r\n        recorder.ondataavailable = (e) => chunks.push(e.data);\r\n        recorder.onstop = () => {\r\n            setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n        };\r\n\r\n        recorder.start();\r\n        setMediaRecorder(recorder);\r\n        setRecording(true);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        mediaRecorder.stop();\r\n        setRecording(false);\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setUploadedAudio(e.target.files[0]);\r\n        setAudioBlob(e.target.files[0]); // Use uploaded file for submission\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let audioFile = audioBlob;\r\n\r\n        if (!audioFile) {\r\n            alert('Please record or upload an audio file.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', audioFile, 'audio_input.wav');\r\n        formData.append('name', name);\r\n        formData.append('dataType', dataType);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8000/api/process-audio', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                alert(`Error: ${errorData.detail || response.statusText}`);\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (data.success) {\r\n                alert(`Prediction: ${data.prediction}`);\r\n            } else {\r\n                alert('Error processing audio. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error submitting form:', error);\r\n            alert('An error occurred. Please try again later.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Nav/>\r\n            <div className=\"audiocontainer\">\r\n                <div className=\"audiocard\">\r\n                    <h2>Submit Your Audio</h2>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <label>\r\n                            Name:\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                                required\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Type of Data:\r\n                            <select\r\n                                name=\"dataType\"\r\n                                value={dataType}\r\n                                onChange={(e) => setDataType(e.target.value)}\r\n                                required\r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n                                <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n                                <option value=\"Folk Songs\">Folk Songs</option>\r\n                                <option value=\"Language and Dialects\">Language and Dialects</option>\r\n                                <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n                            </select>\r\n                        </label>\r\n                        <label>\r\n                            Upload Audio:\r\n                            <input type=\"file\" accept=\"audio/*\" onChange={handleFileChange} />\r\n                        </label>\r\n                        <div className=\"audiorecord-section\">\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={recording ? stopRecording : startRecording}\r\n                                className=\"audiorecord-btn\"\r\n                            >\r\n                                {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n                            </button>\r\n                        </div>\r\n                        {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n                        <button type=\"submit\" className=\"audiosubmit-btn\">Submit</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"audiocard rules\">\r\n                    <h2>Rules and Conditions</h2>\r\n                    <ul>\r\n                        <li>No background noise in the audio recording.</li>\r\n                        <li>Start the audio with your name and the place you are from.</li>\r\n                        <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n                        <li>Then begin the original content.</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <UserFooter/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Audio;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}