{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN SAI KUMAR\\\\OneDrive\\\\Desktop\\\\frontend\\\\frontend\\\\src\\\\components\\\\user\\\\audio.js\",\n  _s = $RefreshSig$();\n// // App.js\n// import React, { useState } from \"react\";\n// import \"./audio.css\";\n// import Nav from \"./nav\";\n// import UserFooter from \"./userfooter\";\n// const Audio = () => {\n//   const [recording, setRecording] = useState(false);\n//   const [audioBlob, setAudioBlob] = useState(null);\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\n\n//   const startRecording = async () => {\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//     const recorder = new MediaRecorder(stream);\n//     const chunks = [];\n\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\n//     recorder.onstop = () => {\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\n//     };\n\n//     recorder.start();\n//     setMediaRecorder(recorder);\n//     setRecording(true);\n//   };\n\n//   const stopRecording = () => {\n//     mediaRecorder.stop();\n//     setRecording(false);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     alert(\"Form submitted successfully!\");\n//     // Add form submission logic here (e.g., send data to a server)\n//   };\n\n//   return (\n//     <>\n//     <Nav/>\n//     <div className=\"audiocontainer\">\n//       <div className=\"audiocard\">\n//         <h2>Submit Your Audio</h2>\n//         <form onSubmit={handleSubmit}>\n//           <label>\n//             Name:\n//             <input type=\"text\" name=\"name\" required />\n//           </label>\n//           <label>\n//             Type of Data:\n//             <select name=\"dataType\" required>\n//               <option value=\"\">Select</option>\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\n//               <option value=\"Folk Songs\">Folk Songs</option>\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n//             </select>\n//           </label>\n//           <label>\n//             Upload Audio:\n//             <input type=\"file\" accept=\"audio/*\" />\n//           </label>\n//           <div className=\"audiorecord-section\">\n//             <button\n//               type=\"button\"\n//               onClick={recording ? stopRecording : startRecording}\n//               className=\"audiorecord-btn\"\n//             >\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\n//             </button>\n//           </div>\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\n//             Submit\n//           </button>\n//         </form>\n//       </div>\n//       <div className=\"audiocard rules\">\n//         <h2>Rules and Conditions</h2>\n//         <ul>\n//           <li>No background noise in the audio recording.</li>\n//           <li>Start the audio with your name and the place you are from.</li>\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\n//           <li>Then begin the original content.</li>\n//         </ul>\n//       </div>\n//     </div>\n//     <UserFooter/>\n//     </>\n//   );\n// }\n\n// export default Audio;\n// App.js\nimport React, { useState } from \"react\";\nimport \"./audio.css\";\nimport Nav from \"./nav\";\nimport UserFooter from \"./userfooter\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Audio = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [predictionResult, setPredictionResult] = useState(null); // State for prediction result\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const recorder = new MediaRecorder(stream);\n    const chunks = [];\n    recorder.ondataavailable = e => chunks.push(e.data);\n    recorder.onstop = async () => {\n      const blob = new Blob(chunks, {\n        type: \"audio/wav\"\n      });\n      setAudioBlob(blob);\n      await processAudio(blob); // Process immediately after recording stops\n    };\n    recorder.start();\n    setMediaRecorder(recorder);\n    setRecording(true);\n  };\n  const stopRecording = () => {\n    if (mediaRecorder) {\n      mediaRecorder.stop();\n      setRecording(false);\n    }\n  };\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (file) {\n      await processAudio(file);\n    }\n  };\n  const processAudio = async audio => {\n    setIsLoading(true);\n    setPredictionResult(null); // Clear previous results\n    try {\n      const formData = new FormData();\n      formData.append('audio', audio, \"recording.wav\"); // Important: Add filename\n\n      const response = await fetch('/predict', {\n        // Replace '/predict' with your backend API endpoint\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPredictionResult(data.result);\n    } catch (error) {\n      console.error(\"Error processing audio:\", error);\n      setPredictionResult(`Error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audiocontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Submit Your Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Upload Audio:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"audio/*\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audiorecord-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: recording ? stopRecording : startRecording,\n            className: \"audiorecord-btn\",\n            children: recording ? \"Stop Recording\" : \"Record Audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), audioBlob && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Recording saved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 35\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Processing audio...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 35\n        }, this), \" \", predictionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-result\",\n          children: predictionResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 42\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard rules\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Rules and Conditions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No background noise in the audio recording.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Start the audio with your name and the place you are from.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Specify the place format: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"village name, mandal name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 55\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Then begin the original content.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Audio, \"MQE1A7rZRG3Bh6YAUpmKGImZOmw=\");\n_c = Audio;\nexport default Audio;\nvar _c;\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"names":["React","useState","Nav","UserFooter","jsxDEV","_jsxDEV","Fragment","_Fragment","Audio","_s","recording","setRecording","audioBlob","setAudioBlob","mediaRecorder","setMediaRecorder","predictionResult","setPredictionResult","isLoading","setIsLoading","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","e","push","data","onstop","blob","Blob","type","processAudio","start","stopRecording","stop","handleFileUpload","file","target","files","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","error","status","result","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN SAI KUMAR/OneDrive/Desktop/frontend/frontend/src/components/user/audio.js"],"sourcesContent":["// // App.js\r\n// import React, { useState } from \"react\";\r\n// import \"./audio.css\";\r\n// import Nav from \"./nav\";\r\n// import UserFooter from \"./userfooter\";\r\n// const Audio = () => {\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBlob, setAudioBlob] = useState(null);\r\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n\r\n//   const startRecording = async () => {\r\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//     const recorder = new MediaRecorder(stream);\r\n//     const chunks = [];\r\n\r\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\r\n//     recorder.onstop = () => {\r\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n//     };\r\n\r\n//     recorder.start();\r\n//     setMediaRecorder(recorder);\r\n//     setRecording(true);\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     mediaRecorder.stop();\r\n//     setRecording(false);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     alert(\"Form submitted successfully!\");\r\n//     // Add form submission logic here (e.g., send data to a server)\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <Nav/>\r\n//     <div className=\"audiocontainer\">\r\n//       <div className=\"audiocard\">\r\n//         <h2>Submit Your Audio</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <label>\r\n//             Name:\r\n//             <input type=\"text\" name=\"name\" required />\r\n//           </label>\r\n//           <label>\r\n//             Type of Data:\r\n//             <select name=\"dataType\" required>\r\n//               <option value=\"\">Select</option>\r\n//               <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n//               <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n//               <option value=\"Folk Songs\">Folk Songs</option>\r\n//               <option value=\"Language and Dialects\">Language and Dialects</option>\r\n//               <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n//             </select>\r\n//           </label>\r\n//           <label>\r\n//             Upload Audio:\r\n//             <input type=\"file\" accept=\"audio/*\" />\r\n//           </label>\r\n//           <div className=\"audiorecord-section\">\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={recording ? stopRecording : startRecording}\r\n//               className=\"audiorecord-btn\"\r\n//             >\r\n//               {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n//             </button>\r\n//           </div>\r\n//           {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n//           <button type=\"submit\" className=\"audiosubmit-btn\">\r\n//             Submit\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//       <div className=\"audiocard rules\">\r\n//         <h2>Rules and Conditions</h2>\r\n//         <ul>\r\n//           <li>No background noise in the audio recording.</li>\r\n//           <li>Start the audio with your name and the place you are from.</li>\r\n//           <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n//           <li>Then begin the original content.</li>\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//     <UserFooter/>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Audio;\r\n// App.js\r\nimport React, { useState } from \"react\";\r\nimport \"./audio.css\";\r\nimport Nav from \"./nav\";\r\nimport UserFooter from \"./userfooter\";\r\n\r\nconst Audio = () => {\r\n    const [recording, setRecording] = useState(false);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const [predictionResult, setPredictionResult] = useState(null); // State for prediction result\r\n    const [isLoading, setIsLoading] = useState(false); // Loading state\r\n\r\n    const startRecording = async () => {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        const chunks = [];\r\n\r\n        recorder.ondataavailable = (e) => chunks.push(e.data);\r\n        recorder.onstop = async () => {\r\n            const blob = new Blob(chunks, { type: \"audio/wav\" });\r\n            setAudioBlob(blob);\r\n            await processAudio(blob); // Process immediately after recording stops\r\n        };\r\n\r\n        recorder.start();\r\n        setMediaRecorder(recorder);\r\n        setRecording(true);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.stop();\r\n            setRecording(false);\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            await processAudio(file);\r\n        }\r\n    };\r\n\r\n\r\n    const processAudio = async (audio) => {\r\n        setIsLoading(true);\r\n        setPredictionResult(null); // Clear previous results\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('audio', audio, \"recording.wav\"); // Important: Add filename\r\n\r\n            const response = await fetch('/predict', { // Replace '/predict' with your backend API endpoint\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setPredictionResult(data.result);\r\n        } catch (error) {\r\n            console.error(\"Error processing audio:\", error);\r\n            setPredictionResult(`Error: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Nav />\r\n            <div className=\"audiocontainer\">\r\n                <div className=\"audiocard\">\r\n                    <h2>Submit Your Audio</h2>\r\n                    <label>\r\n                        Upload Audio:\r\n                        <input type=\"file\" accept=\"audio/*\" onChange={handleFileUpload} />\r\n                    </label>\r\n                    <div className=\"audiorecord-section\">\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={recording ? stopRecording : startRecording}\r\n                            className=\"audiorecord-btn\"\r\n                        >\r\n                            {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n                        </button>\r\n                    </div>\r\n                    {audioBlob && <p>Recording saved!</p>}\r\n\r\n                    {isLoading && <p>Processing audio...</p>} {/* Loading indicator */}\r\n                    {predictionResult && <div className=\"prediction-result\">{predictionResult}</div>} {/* Display result */}\r\n                </div>\r\n                <div className=\"audiocard rules\">\r\n                    <h2>Rules and Conditions</h2>\r\n                    <ul>\r\n                        <li>No background noise in the audio recording.</li>\r\n                        <li>Start the audio with your name and the place you are from.</li>\r\n                        <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n                        <li>Then begin the original content.</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <UserFooter />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Audio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}