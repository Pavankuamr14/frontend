{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAVAN SAI KUMAR\\\\OneDrive\\\\Desktop\\\\frontend\\\\frontend\\\\src\\\\components\\\\user\\\\audio.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./audio.css\";\n// import Nav from \"./nav\";\n// import UserFooter from \"./userfooter\";\n\n// const Audio = () => {\n//   const [recording, setRecording] = useState(false);\n//   const [audioBlob, setAudioBlob] = useState(null);\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [popupMessage, setPopupMessage] = useState(\"\");\n\n//   const startRecording = async () => {\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//     const recorder = new MediaRecorder(stream);\n//     const chunks = [];\n\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\n//     recorder.onstop = () => {\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\n//     };\n\n//     recorder.start();\n//     setMediaRecorder(recorder);\n//     setRecording(true);\n//   };\n\n//   const stopRecording = () => {\n//     mediaRecorder.stop();\n//     setRecording(false);\n//   };\n\n//   const handleFileChange = (e) => {\n//     setSelectedFile(e.target.files[0]);\n//     setAudioBlob(null); // Clear recorded audio if a file is selected\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!audioBlob && !selectedFile) {\n//       alert(\"Please record or upload an audio file.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     if (audioBlob) {\n//       formData.append(\"audio\", audioBlob, \"recording.wav\");\n//     } else if (selectedFile) {\n//       formData.append(\"audio\", selectedFile);\n//     }\n\n//     try {\n//       const res = await fetch(\"http://127.0.0.1:5000/process-audio\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       if (data.error) {\n//         alert(\"Error processing audio: \" + data.error);\n//       } else {\n//         setPopupMessage(data.result);\n//         alert(data.result); // Popup message\n//       }\n//     } catch (error) {\n//       console.error(\"Error uploading audio:\", error);\n//       alert(\"Failed to process audio.\");\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Nav />\n//       <div className=\"audiocontainer\">\n//         <div className=\"audiocard\">\n//           <h2>Submit Your Audio</h2>\n//           <form onSubmit={handleSubmit}>\n//             <label>\n//               Name:\n//               <input type=\"text\" name=\"name\" required />\n//             </label>\n//             <label>\n//               Type of Data:\n//               <select name=\"dataType\" required>\n//                 <option value=\"\">Select</option>\n//                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\n//                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\n//                 <option value=\"Folk Songs\">Folk Songs</option>\n//                 <option value=\"Language and Dialects\">Language and Dialects</option>\n//                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\n//               </select>\n//             </label>\n//             <label>\n//               Upload Audio:\n//               <input\n//                 type=\"file\"\n//                 accept=\"audio/*\"\n//                 onChange={handleFileChange}\n//               />\n//             </label>\n//             <div className=\"audiorecord-section\">\n//               <button\n//                 type=\"button\"\n//                 onClick={recording ? stopRecording : startRecording}\n//                 className=\"audiorecord-btn\"\n//               >\n//                 {recording ? \"Stop Recording\" : \"Record Audio\"}\n//               </button>\n//             </div>\n//             {audioBlob && <p>Recording saved! You can submit now.</p>}\n//             {selectedFile && <p>File selected: {selectedFile.name}</p>}\n//             <button type=\"submit\" className=\"audiosubmit-btn\">\n//               Submit\n//             </button>\n//           </form>\n//         </div>\n//         <div className=\"audiocard rules\">\n//           <h2>Rules and Conditions</h2>\n//           <ul>\n//             <li>No background noise in the audio recording.</li>\n//             <li>Start the audio with your name and the place you are from.</li>\n//             <li>Specify the place format: <b>village name, mandal name</b>.</li>\n//             <li>Then begin the original content.</li>\n//           </ul>\n//         </div>\n//         {popupMessage && <div className=\"popup\">{popupMessage}</div>}\n//       </div>\n//       <UserFooter />\n//     </>\n//   );\n// };\n\n// export default Audio;\nimport React, { useState } from \"react\";\nimport \"./audio.css\";\nimport Nav from \"./nav\";\nimport UserFooter from \"./userfooter\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Audio = () => {\n  _s();\n  // State management\n  const [recording, setRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [popupMessage, setPopupMessage] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    dataType: \"\"\n  });\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle file upload\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setAudioBlob(null); // Clear recorded audio if a file is selected\n    }\n  };\n\n  // Start recording\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const recorder = new MediaRecorder(stream);\n      const chunks = [];\n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = () => {\n        const blob = new Blob(chunks, {\n          type: \"audio/wav\"\n        });\n        setAudioBlob(blob);\n        stream.getTracks().forEach(track => track.stop());\n      };\n      recorder.start();\n      setMediaRecorder(recorder);\n      setRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n      setPopupMessage(\"Error accessing microphone. Please check permissions.\");\n    }\n  };\n\n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\n      mediaRecorder.stop();\n      setRecording(false);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!audioBlob && !selectedFile) {\n      setPopupMessage(\"Please record or upload an audio file.\");\n      return;\n    }\n    if (!formData.name || !formData.dataType) {\n      setPopupMessage(\"Please fill in all required fields.\");\n      return;\n    }\n    setIsProcessing(true);\n    setPopupMessage(\"Processing audio... Please wait.\");\n    const formPayload = new FormData();\n    formPayload.append(\"name\", formData.name);\n    formPayload.append(\"dataType\", formData.dataType);\n    if (audioBlob) {\n      formPayload.append(\"audio\", audioBlob, \"recording.wav\");\n    } else if (selectedFile) {\n      formPayload.append(\"audio\", selectedFile);\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/process-audio\", {\n        method: \"POST\",\n        body: formPayload\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPopupMessage(data.error || data.result);\n    } catch (error) {\n      console.error(\"Error during fetch:\", error);\n      setPopupMessage(\"Failed to process audio. Please try again later.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audiocontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Submit Your Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              value: formData.name,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Type of Data:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"dataType\",\n              value: formData.dataType,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Local Legends and Stories\",\n                children: \"Local Legends and Stories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Cultural Explanations\",\n                children: \"Cultural Explanations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Folk Songs\",\n                children: \"Folk Songs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Language and Dialects\",\n                children: \"Language and Dialects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Traditional Crop Information\",\n                children: \"Traditional Crop Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Upload Audio:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \"audio/*\",\n              onChange: handleFileChange,\n              disabled: recording || isProcessing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"audiorecord-section\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: recording ? stopRecording : startRecording,\n              className: \"audiorecord-btn\",\n              disabled: selectedFile || isProcessing,\n              children: recording ? \"Stop Recording\" : \"Record Audio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), audioBlob && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Recording saved! You can submit now.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 27\n          }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File selected: \", selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"audiosubmit-btn\",\n            disabled: isProcessing || !audioBlob && !selectedFile,\n            children: isProcessing ? \"Processing...\" : \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audiocard rules\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Rules and Conditions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No background noise in the audio recording.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Start the audio with your name and the place you are from.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Specify the place format: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"village name, mandal name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 43\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Then begin the original content.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), popupMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [popupMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setPopupMessage(\"\"),\n          className: \"close-popup\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Audio, \"TnAhvgptDAajWY/WNI7kP4Tw98k=\");\n_c = Audio;\nexport default Audio;\nvar _c;\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"names":["React","useState","Nav","UserFooter","jsxDEV","_jsxDEV","Fragment","_Fragment","Audio","_s","recording","setRecording","audioBlob","setAudioBlob","mediaRecorder","setMediaRecorder","selectedFile","setSelectedFile","popupMessage","setPopupMessage","isProcessing","setIsProcessing","formData","setFormData","name","dataType","handleInputChange","e","value","target","prev","handleFileChange","file","files","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","push","data","onstop","blob","Blob","type","getTracks","forEach","track","stop","start","error","console","stopRecording","state","handleSubmit","preventDefault","formPayload","FormData","append","response","fetch","method","body","ok","Error","status","json","result","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","onChange","required","accept","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/PAVAN SAI KUMAR/OneDrive/Desktop/frontend/frontend/src/components/user/audio.js"],"sourcesContent":["\r\n// import React, { useState } from \"react\";\r\n// import \"./audio.css\";\r\n// import Nav from \"./nav\";\r\n// import UserFooter from \"./userfooter\";\r\n\r\n// const Audio = () => {\r\n//   const [recording, setRecording] = useState(false);\r\n//   const [audioBlob, setAudioBlob] = useState(null);\r\n//   const [mediaRecorder, setMediaRecorder] = useState(null);\r\n//   const [selectedFile, setSelectedFile] = useState(null);\r\n//   const [popupMessage, setPopupMessage] = useState(\"\");\r\n\r\n//   const startRecording = async () => {\r\n//     const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//     const recorder = new MediaRecorder(stream);\r\n//     const chunks = [];\r\n\r\n//     recorder.ondataavailable = (e) => chunks.push(e.data);\r\n//     recorder.onstop = () => {\r\n//       setAudioBlob(new Blob(chunks, { type: \"audio/wav\" }));\r\n//     };\r\n\r\n//     recorder.start();\r\n//     setMediaRecorder(recorder);\r\n//     setRecording(true);\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     mediaRecorder.stop();\r\n//     setRecording(false);\r\n//   };\r\n\r\n//   const handleFileChange = (e) => {\r\n//     setSelectedFile(e.target.files[0]);\r\n//     setAudioBlob(null); // Clear recorded audio if a file is selected\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!audioBlob && !selectedFile) {\r\n//       alert(\"Please record or upload an audio file.\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     if (audioBlob) {\r\n//       formData.append(\"audio\", audioBlob, \"recording.wav\");\r\n//     } else if (selectedFile) {\r\n//       formData.append(\"audio\", selectedFile);\r\n//     }\r\n\r\n//     try {\r\n//       const res = await fetch(\"http://127.0.0.1:5000/process-audio\", {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await res.json();\r\n//       if (data.error) {\r\n//         alert(\"Error processing audio: \" + data.error);\r\n//       } else {\r\n//         setPopupMessage(data.result);\r\n//         alert(data.result); // Popup message\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error uploading audio:\", error);\r\n//       alert(\"Failed to process audio.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Nav />\r\n//       <div className=\"audiocontainer\">\r\n//         <div className=\"audiocard\">\r\n//           <h2>Submit Your Audio</h2>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <label>\r\n//               Name:\r\n//               <input type=\"text\" name=\"name\" required />\r\n//             </label>\r\n//             <label>\r\n//               Type of Data:\r\n//               <select name=\"dataType\" required>\r\n//                 <option value=\"\">Select</option>\r\n//                 <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n//                 <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n//                 <option value=\"Folk Songs\">Folk Songs</option>\r\n//                 <option value=\"Language and Dialects\">Language and Dialects</option>\r\n//                 <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n//               </select>\r\n//             </label>\r\n//             <label>\r\n//               Upload Audio:\r\n//               <input\r\n//                 type=\"file\"\r\n//                 accept=\"audio/*\"\r\n//                 onChange={handleFileChange}\r\n//               />\r\n//             </label>\r\n//             <div className=\"audiorecord-section\">\r\n//               <button\r\n//                 type=\"button\"\r\n//                 onClick={recording ? stopRecording : startRecording}\r\n//                 className=\"audiorecord-btn\"\r\n//               >\r\n//                 {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n//               </button>\r\n//             </div>\r\n//             {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n//             {selectedFile && <p>File selected: {selectedFile.name}</p>}\r\n//             <button type=\"submit\" className=\"audiosubmit-btn\">\r\n//               Submit\r\n//             </button>\r\n//           </form>\r\n//         </div>\r\n//         <div className=\"audiocard rules\">\r\n//           <h2>Rules and Conditions</h2>\r\n//           <ul>\r\n//             <li>No background noise in the audio recording.</li>\r\n//             <li>Start the audio with your name and the place you are from.</li>\r\n//             <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n//             <li>Then begin the original content.</li>\r\n//           </ul>\r\n//         </div>\r\n//         {popupMessage && <div className=\"popup\">{popupMessage}</div>}\r\n//       </div>\r\n//       <UserFooter />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Audio;\r\nimport React, { useState } from \"react\";\r\nimport \"./audio.css\";\r\nimport Nav from \"./nav\";\r\nimport UserFooter from \"./userfooter\";\r\n\r\nconst Audio = () => {\r\n  // State management\r\n  const [recording, setRecording] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState(null);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [popupMessage, setPopupMessage] = useState(\"\");\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    dataType: \"\"\r\n  });\r\n\r\n  // Handle form input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setSelectedFile(file);\r\n      setAudioBlob(null); // Clear recorded audio if a file is selected\r\n    }\r\n  };\r\n\r\n  // Start recording\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const recorder = new MediaRecorder(stream);\r\n      const chunks = [];\r\n\r\n      recorder.ondataavailable = (e) => chunks.push(e.data);\r\n      recorder.onstop = () => {\r\n        const blob = new Blob(chunks, { type: \"audio/wav\" });\r\n        setAudioBlob(blob);\r\n        stream.getTracks().forEach(track => track.stop());\r\n      };\r\n\r\n      recorder.start();\r\n      setMediaRecorder(recorder);\r\n      setRecording(true);\r\n    } catch (error) {\r\n      console.error(\"Error accessing microphone:\", error);\r\n      setPopupMessage(\"Error accessing microphone. Please check permissions.\");\r\n    }\r\n  };\r\n\r\n  // Stop recording\r\n  const stopRecording = () => {\r\n    if (mediaRecorder && mediaRecorder.state !== \"inactive\") {\r\n      mediaRecorder.stop();\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!audioBlob && !selectedFile) {\r\n      setPopupMessage(\"Please record or upload an audio file.\");\r\n      return;\r\n    }\r\n\r\n    if (!formData.name || !formData.dataType) {\r\n      setPopupMessage(\"Please fill in all required fields.\");\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n    setPopupMessage(\"Processing audio... Please wait.\");\r\n\r\n    const formPayload = new FormData();\r\n    formPayload.append(\"name\", formData.name);\r\n    formPayload.append(\"dataType\", formData.dataType);\r\n    \r\n    if (audioBlob) {\r\n      formPayload.append(\"audio\", audioBlob, \"recording.wav\");\r\n    } else if (selectedFile) {\r\n      formPayload.append(\"audio\", selectedFile);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/process-audio\", {\r\n        method: \"POST\",\r\n        body: formPayload,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPopupMessage(data.error || data.result);\r\n    } catch (error) {\r\n      console.error(\"Error during fetch:\", error);\r\n      setPopupMessage(\"Failed to process audio. Please try again later.\");\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav />\r\n      <div className=\"audiocontainer\">\r\n        <div className=\"audiocard\">\r\n          <h2>Submit Your Audio</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <label>\r\n              Name:\r\n              <input \r\n                type=\"text\" \r\n                name=\"name\" \r\n                value={formData.name}\r\n                onChange={handleInputChange}\r\n                required \r\n              />\r\n            </label>\r\n            <label>\r\n              Type of Data:\r\n              <select \r\n                name=\"dataType\" \r\n                value={formData.dataType}\r\n                onChange={handleInputChange}\r\n                required\r\n              >\r\n                <option value=\"\">Select</option>\r\n                <option value=\"Local Legends and Stories\">Local Legends and Stories</option>\r\n                <option value=\"Cultural Explanations\">Cultural Explanations</option>\r\n                <option value=\"Folk Songs\">Folk Songs</option>\r\n                <option value=\"Language and Dialects\">Language and Dialects</option>\r\n                <option value=\"Traditional Crop Information\">Traditional Crop Information</option>\r\n              </select>\r\n            </label>\r\n            <label>\r\n              Upload Audio:\r\n              <input\r\n                type=\"file\"\r\n                accept=\"audio/*\"\r\n                onChange={handleFileChange}\r\n                disabled={recording || isProcessing}\r\n              />\r\n            </label>\r\n            <div className=\"audiorecord-section\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={recording ? stopRecording : startRecording}\r\n                className=\"audiorecord-btn\"\r\n                disabled={selectedFile || isProcessing}\r\n              >\r\n                {recording ? \"Stop Recording\" : \"Record Audio\"}\r\n              </button>\r\n            </div>\r\n            {audioBlob && <p>Recording saved! You can submit now.</p>}\r\n            {selectedFile && <p>File selected: {selectedFile.name}</p>}\r\n            <button \r\n              type=\"submit\" \r\n              className=\"audiosubmit-btn\"\r\n              disabled={isProcessing || (!audioBlob && !selectedFile)}\r\n            >\r\n              {isProcessing ? \"Processing...\" : \"Submit\"}\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"audiocard rules\">\r\n          <h2>Rules and Conditions</h2>\r\n          <ul>\r\n            <li>No background noise in the audio recording.</li>\r\n            <li>Start the audio with your name and the place you are from.</li>\r\n            <li>Specify the place format: <b>village name, mandal name</b>.</li>\r\n            <li>Then begin the original content.</li>\r\n          </ul>\r\n        </div>\r\n        {popupMessage && (\r\n          <div className=\"popup\">\r\n            {popupMessage}\r\n            <button \r\n              onClick={() => setPopupMessage(\"\")} \r\n              className=\"close-popup\"\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <UserFooter />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Audio;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}